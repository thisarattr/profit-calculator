/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/tutorial_java_projects.html
 */

plugins {
    id 'java' // Apply the java plugin to add support for Java
    id 'application' // Apply the application plugin to add support for building an application
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
}

// Define the main class for the application
mainClassName = 'org.finance.profitcalculator.ProfitCalculatorApp'
group = 'org.finance'
version = '1.0'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    //implementation 'com.google.guava:guava:26.0-jre'
    implementation 'com.google.inject:guice:4.2.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.11.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.11.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.0.0'
}

jar {
    enabled = true
    version = "$version"
    manifest {
        attributes 'Specification-Title': 'Profit Calculator'
        attributes 'Main-Class': 'org.finance.profitcalculator.ProfitCalculatorApp'
        attributes 'Specification-Version': "$version"
        attributes 'Implementation-Version': "$version"
        attributes "Implementation-Timestamp": new Date()
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

checkstyle {
    configFile = file("$projectDir/resources/google-checkstyle.xml")
    toolVersion = "8.30"
}

tasks.withType(Checkstyle) {
    classpath = project.sourceSets.main.output
    classpath += configurations.compile
    classpath += configurations.testCompile
}

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/reports/jacoco")
}

test {
    jacoco {
        append = false
        enabled = true
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/jacocoHtml")
    }
}
